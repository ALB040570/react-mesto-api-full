{"ast":null,"code":"var _jsxFileName = \"/Users/lazzat/Documents/2021 yandex/dev2021/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditProfilePopup.js\",\n    _s = $RefreshSig$();\n\nimport PopupWithForm from './PopupWithForm.js';\nimport { useState, useEffect, useContext } from 'react';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditProfilePopup(props) {\n  _s();\n\n  // Стейты, в которых содержатся значения инпутов name и description\n  const [name, setName] = useState('имя');\n  const [description, setDescription] = useState('инфа'); // Подписка на контекст\n\n  const currentUser = useContext(CurrentUserContext); // После загрузки текущего пользователя из API\n  // его данные будут использованы в управляемых компонентах.\n\n  useEffect(() => {\n    setName(currentUser.name);\n    setDescription(currentUser.about);\n  }, [currentUser]); // Обработчик изменения инпута обновляет стейт\n\n  const handleChange = e => {\n    e.target.id === \"name\" ? setName(e.target.value) : setDescription(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    // Запрещаем браузеру переходить по адресу формы\n    e.preventDefault(); // Передаём значения управляемых компонентов во внешний обработчик\n\n    props.onUpdateUser({\n      name: name,\n      about: description\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    id: \"edit\",\n    name: \"info\",\n    title: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C\",\n    isOpen: props.isOpen,\n    onClose: props.onClose,\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043C\\u044F\",\n        required: true,\n        className: \"popup__input\",\n        name: \"popup-name\",\n        id: \"name\",\n        minLength: \"2\",\n        maxLength: \"40\",\n        value: name || '',\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"popup__error\",\n        id: \"name-error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0434\\u0435\\u044F\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438\",\n        required: true,\n        className: \"popup__input popup__input_type_description\",\n        name: \"popup-profession\",\n        id: \"info\",\n        minLength: \"2\",\n        maxLength: \"200\",\n        value: description || '',\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"popup__error\",\n        id: \"info-error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 1\n  }, this);\n}\n\n_s(EditProfilePopup, \"cdKzXeDY9b47W+vMtktnib2wUTU=\");\n\n_c = EditProfilePopup;\nexport default EditProfilePopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditProfilePopup\");","map":{"version":3,"sources":["/Users/lazzat/Documents/2021 yandex/dev2021/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditProfilePopup.js"],"names":["PopupWithForm","useState","useEffect","useContext","CurrentUserContext","EditProfilePopup","props","name","setName","description","setDescription","currentUser","about","handleChange","e","target","id","value","handleSubmit","preventDefault","onUpdateUser","isOpen","onClose"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,SAAQC,QAAR,EAAiBC,SAAjB,EAA4BC,UAA5B,QAA6C,OAA7C;AACA,SAAQC,kBAAR,QAAiC,gCAAjC;;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC7B;AACF,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,MAAD,CAA9C,CAH+B,CAK/B;;AACA,QAAMU,WAAW,GAAGR,UAAU,CAACC,kBAAD,CAA9B,CAN+B,CAQjC;AACA;;AACIF,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACG,WAAW,CAACJ,IAAb,CAAP;AACAG,IAAAA,cAAc,CAACC,WAAW,CAACC,KAAb,CAAd;AACD,GAHQ,EAGN,CAACD,WAAD,CAHM,CAAT,CAV6B,CAe/B;;AACF,QAAME,YAAY,GAAIC,CAAD,IAAM;AACvBA,IAAAA,CAAC,CAACC,MAAF,CAASC,EAAT,KAAgB,MAAhB,GAAwBR,OAAO,CAACM,CAAC,CAACC,MAAF,CAASE,KAAV,CAA/B,GAAiDP,cAAc,CAACI,CAAC,CAACC,MAAF,CAASE,KAAV,CAA/D;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAIJ,CAAD,IAAM;AACvB;AACAA,IAAAA,CAAC,CAACK,cAAF,GAFuB,CAGvB;;AACAb,IAAAA,KAAK,CAACc,YAAN,CAAmB;AACjBb,MAAAA,IAAI,EAAEA,IADW;AAEjBK,MAAAA,KAAK,EAAEH;AAFU,KAAnB;AAID,GARH;;AAUA,sBACA,QAAC,aAAD;AAAe,IAAA,EAAE,EAAC,MAAlB;AACM,IAAA,IAAI,EAAG,MADb;AAEM,IAAA,KAAK,EAAG,2HAFd;AAGM,IAAA,MAAM,EAAIH,KAAK,CAACe,MAHtB;AAIM,IAAA,OAAO,EAAIf,KAAK,CAACgB,OAJvB;AAKM,IAAA,QAAQ,EAAIJ,YALlB;AAMM,IAAA,QAAQ,eACN;AAAA,8BACE;AACE,QAAA,WAAW,EAAE,+DADf;AAEE,QAAA,QAAQ,MAFV;AAEW,QAAA,SAAS,EAAC,cAFrB;AAGE,QAAA,IAAI,EAAG,YAHT;AAIE,QAAA,EAAE,EAAC,MAJL;AAKE,QAAA,SAAS,EAAC,GALZ;AAME,QAAA,SAAS,EAAC,IANZ;AAOE,QAAA,KAAK,EAAEX,IAAI,IAAI,EAPjB;AAQE,QAAA,QAAQ,EAAEM;AARZ;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,EAAE,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AACE,QAAA,WAAW,EAAC,yLADd;AAEE,QAAA,QAAQ,MAFV;AAEW,QAAA,SAAS,EAAC,4CAFrB;AAGE,QAAA,IAAI,EAAG,kBAHT;AAIE,QAAA,EAAE,EAAC,MAJL;AAKE,QAAA,SAAS,EAAC,GALZ;AAME,QAAA,SAAS,EAAC,KANZ;AAOE,QAAA,KAAK,EAAEJ,WAAW,IAAI,EAPxB;AAQE,QAAA,QAAQ,EAAEI;AARZ;AAAA;AAAA;AAAA;AAAA,cAZF,eAsBE;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,EAAE,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAPR;AAAA;AAAA;AAAA;AAAA,UADA;AAiCC;;GA/DQR,gB;;KAAAA,gB;AAgET,eAAeA,gBAAf","sourcesContent":["import PopupWithForm from './PopupWithForm.js';\nimport {useState,useEffect, useContext} from 'react';\nimport {CurrentUserContext} from '../contexts/CurrentUserContext';\n\nfunction EditProfilePopup(props) {\n    // Стейты, в которых содержатся значения инпутов name и description\n  const [name, setName] = useState('имя');\n  const [description, setDescription] = useState('инфа');\n\n  // Подписка на контекст\n  const currentUser = useContext(CurrentUserContext);\n\n// После загрузки текущего пользователя из API\n// его данные будут использованы в управляемых компонентах.\n    useEffect(() => {\n      setName(currentUser.name);\n      setDescription(currentUser.about);\n    }, [currentUser]);\n\n  // Обработчик изменения инпута обновляет стейт\nconst handleChange = (e) =>{\n    e.target.id === \"name\"? setName(e.target.value): setDescription(e.target.value);\n}\n\nconst handleSubmit = (e) =>{\n    // Запрещаем браузеру переходить по адресу формы\n    e.preventDefault();\n    // Передаём значения управляемых компонентов во внешний обработчик\n    props.onUpdateUser({\n      name: name,\n      about: description,\n    });\n  }\n\nreturn(\n<PopupWithForm id=\"edit\"\n      name = \"info\"\n      title = \"Редактировать профиль\"\n      isOpen = {props.isOpen}\n      onClose = {props.onClose}\n      onSubmit = {handleSubmit}\n      children = {\n        <>\n          <input \n            placeholder= \"Введите имя\" \n            required className=\"popup__input\" \n            name = \"popup-name\" \n            id=\"name\"  \n            minLength=\"2\" \n            maxLength=\"40\"\n            value={name || ''}\n            onChange={handleChange} \n            />\n          <span className=\"popup__error\" id=\"name-error\"/>\n          <input \n            placeholder=\"Введите информацию о деятельности\" \n            required className=\"popup__input popup__input_type_description\"\n            name = \"popup-profession\" \n            id=\"info\" \n            minLength=\"2\" \n            maxLength=\"200\"\n            value={description || ''}\n            onChange={handleChange} \n            />\n          <span className=\"popup__error\" id=\"info-error\"/></>}\n    />\n)\n}\nexport default EditProfilePopup;\n"]},"metadata":{},"sourceType":"module"}