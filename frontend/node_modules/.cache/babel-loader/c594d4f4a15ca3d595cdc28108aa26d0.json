{"ast":null,"code":"import optionsForApi from './constants.js'; // класс Api\n\nclass Api {\n  constructor(options) {\n    this._baseUrl = `${window.location.protocol}${process.env.REACT_APP_API_URL || '//localhost:3001'}`; // this._headers = options.headers;\n\n    this._headersForAuth = options.headersForAuth;\n    this._usersMe = options.dir.usersMe;\n    this._cards = options.dir.cards;\n    this._likes = options.dir.likes;\n    this._avatar = options.dir.avatar;\n    this._signIn = options.dir.signIn;\n    this._signUp = options.dir.signUp;\n  } //\n  //Отправка на сервер данных регистрации пользоваателя\n\n\n  register(email, password) {\n    return fetch(this._baseUrl + this._signUp, {\n      method: 'POST',\n      headers: this._headersForAuth,\n      credentials: 'include',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  } //Отправка на сервер данных для авторизации\n\n\n  authorize(email, password) {\n    return fetch(this._baseUrl + this._signIn, {\n      method: 'POST',\n      headers: this._headersForAuth,\n      credentials: 'include',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  } // запрос для проверки валидности токена\n\n\n  getContent(token) {\n    return fetch(this._baseUrl + this._usersMe, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  } //Загрузка карточек с сервера\n\n\n  getCards() {\n    return fetch(this._baseUrl + this._cards, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDYzZmM1NzlhY2ZjMmFlOGI2NmY3YzkiLCJpYXQiOjE2MTcxNjU0MzYsImV4cCI6MTYxNzc3MDIzNn0.eITLYkLbkzKDcVuWFrH6UHQpUK5y8aZ8htqRgImhiIg}'\n      }\n    }).then(this._checkResponse);\n  } //Загрузка информации о пользователе с сервера\n\n\n  getUsersInfo() {\n    return fetch(this._baseUrl + this._usersMe, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //Редактирование профиля\n\n\n  patchUsersInfo(data) {\n    return fetch(this._baseUrl + this._usersMe, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  } //Добавление новой карточки\n\n\n  postCard(data) {\n    return fetch(this._baseUrl + this._cards, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  } //Удаление карточки\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}${this._cards}/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //функция объединяет и вызывает методы обновления/снятия лайка\n\n\n  changeLikeCardStatus(cardId, isLike) {\n    const method = isLike ? 'PUT' : 'DELETE';\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: method,\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //Постановка лайка\n\n\n  putLike(cardId) {\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //Cнятие лайка\n\n\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //Обновление аватара пользователя\n\n\n  patchAvatar(data) {\n    return fetch(this._baseUrl + this._avatar, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n}\n\nconst api = new Api(optionsForApi);\nexport default api;","map":{"version":3,"sources":["/Users/lazzat/Documents/2021 yandex/dev2021/react-mesto-api-full/react-mesto-api-full/frontend/src/utils/api.js"],"names":["optionsForApi","Api","constructor","options","_baseUrl","window","location","protocol","process","env","REACT_APP_API_URL","_headersForAuth","headersForAuth","_usersMe","dir","usersMe","_cards","cards","_likes","likes","_avatar","avatar","_signIn","signIn","_signUp","signUp","register","email","password","fetch","method","headers","credentials","body","JSON","stringify","then","_checkResponse","authorize","getContent","token","getCards","getUsersInfo","_headers","patchUsersInfo","data","name","about","postCard","link","deleteCard","cardId","changeLikeCardStatus","isLike","putLike","deleteLike","patchAvatar","res","ok","json","Promise","reject","status","api"],"mappings":"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","sourcesContent":["import optionsForApi from './constants.js';\n// класс Api\n\nclass Api {\n  constructor(options) {\n    this._baseUrl  = `${window.location.protocol}${process.env.REACT_APP_API_URL || '//localhost:3001'}`;\n    // this._headers = options.headers;\n    this._headersForAuth = options.headersForAuth;\n    this._usersMe = options.dir.usersMe;\n    this._cards = options.dir.cards;\n    this._likes = options.dir.likes;\n    this._avatar = options.dir.avatar;\n    this._signIn = options.dir.signIn;\n    this._signUp = options.dir.signUp;\n  }\n  //\n\n  //Отправка на сервер данных регистрации пользоваателя\n  register(email, password) {\n    return fetch(this._baseUrl + this._signUp, {\n      method: 'POST',\n      headers: this._headersForAuth,\n      credentials: 'include',\n      body: JSON.stringify({email, password})\n    })\n    .then(this._checkResponse)\n  }\n\n  //Отправка на сервер данных для авторизации\n  authorize(email, password) {\n    return fetch(this._baseUrl + this._signIn, {\n      method: 'POST',\n      headers: this._headersForAuth,\n      credentials: 'include',\n      body: JSON.stringify({email, password})\n    })\n    .then(this._checkResponse)\n  }\n\n  // запрос для проверки валидности токена\n  getContent(token) {\n    return fetch(this._baseUrl + this._usersMe, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      }\n    })\n    .then(this._checkResponse)\n  }\n\n  //Загрузка карточек с сервера\n  getCards() {\n    return fetch(this._baseUrl + this._cards, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDYzZmM1NzlhY2ZjMmFlOGI2NmY3YzkiLCJpYXQiOjE2MTcxNjU0MzYsImV4cCI6MTYxNzc3MDIzNn0.eITLYkLbkzKDcVuWFrH6UHQpUK5y8aZ8htqRgImhiIg}',\n      }\n    })\n    .then(this._checkResponse)\n  }\n  //Загрузка информации о пользователе с сервера\n  getUsersInfo() {\n    return fetch(this._baseUrl+this._usersMe, {\n      method: 'GET',\n      headers: this._headers,\n    })\n    .then(this._checkResponse)\n  }\n  //Редактирование профиля\n  patchUsersInfo(data) {\n    return fetch(this._baseUrl+this._usersMe, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    })\n    .then(this._checkResponse)\n  }\n\n\n  //Добавление новой карточки\n  postCard(data) {\n    return fetch(this._baseUrl + this._cards, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n    .then(this._checkResponse)\n  }\n  //Удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}${this._cards}/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this._checkResponse)\n  }\n\n  //функция объединяет и вызывает методы обновления/снятия лайка\n  changeLikeCardStatus(cardId, isLike) {\n    const method = isLike?'PUT':'DELETE';\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: method,\n      headers: this._headers,\n    })\n    .then(this._checkResponse)\n  }\n\n\n  //Постановка лайка\n  putLike(cardId) {\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers,\n    })\n    .then(this._checkResponse)\n  }\n  //Cнятие лайка\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}${this._likes}/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this._checkResponse)\n  }\n  //Обновление аватара пользователя\n  patchAvatar(data) {\n    return fetch(this._baseUrl+this._avatar, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n        })\n    })\n    .then(this._checkResponse)\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n        return res.json();\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n}\nconst api = new Api(optionsForApi);\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}